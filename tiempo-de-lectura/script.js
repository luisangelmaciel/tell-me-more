(function() {
  var Article, Marker, ReadTimer;

  ReadTimer = (function() {
    class ReadTimer {
      constructor(container, article1, {wpm} = {}) {
        var article, i, len, ref, self;
        this.container = container;
        this.article = article1;
        self = this;
        this.wpm = wpm != null ? wpm : 250;
        this.el = $(this.container)[0];
        $(this.article).each(function() {
          return self.articles.push(new Article($(this)[0], self.wpm));
        });
        ref = this.articles;
        for (i = 0, len = ref.length; i < len; i++) {
          article = ref[i];
          article.assignReadTime('h1');
        }
      }

    };

    ReadTimer.prototype.articles = [];

    return ReadTimer;

  }).call(this);

  Article = class Article {
    constructor(el1, wpm1) {
      this.el = el1;
      this.wpm = wpm1;
      this.chars = 0;
      this.wordCount = 0;
      this.wordsRead = 0;
      this.readTime = 0;
      this.text = this.getText();
      this.words = this.getWords(this.text);
      this.wordsRemaining = this.wordCount;
      this.readTime = this.wordCount / this.wpm;
      this.aprxTime = this.getApproximateTime(this.readTime);
      this.height = $(this.el).height();
      this.wordsPerPixel = this.words.length / this.height;
      this.marker = this.setMarker();
      $(window).scroll(() => {
        return this.update();
      });
      $(window).resize(() => {
        return this.adjustWPP();
      });
    }

    getText() {
      var text, that;
      that = this;
      text = "";
      $(this.el).children().each(function() {
        var el;
        el = $(this)[0];
        return text += el.textContent || el.innerText || '';
      });
      this.chars = text.length;
      return text;
    }

    getWords(text) {
      var pattern, trimmed, windex, word, words;
      words = [];
      if (this.text.length > 0) {
        trimmed = $.trim(this.text);
        words = trimmed.split(' ');
        pattern = /\s/g;
        for (windex in words) {
          word = words[windex];
          if (word.match(pattern)) {
            words.splice(windex, 1);
          }
        }
        this.wordCount = words.length;
        return words;
      }
    }

    getApproximateTime(time) {
      var rounded;
      return rounded = (Math.round(time * 2)) / 2;
    }

    assignReadTime(el) {
      var note;
      note = document.createElement('span');
      note.className += 'read-time';
      note.innerHTML = this.aprxTime + ' mins';
      return $(this.el).find(el).css('padding-right', '50px').append(note);
    }

    adjustWPP() {
      this.height = $(this.el).height();
      return this.wordsPerPixel = this.words.length / this.height;
    }

    setMarker() {
      $(this.el).css({
        'position': 'relative'
      });
      return new Marker(this.el);
    }

    update() {
      var scrolledTo, timeRem, wordsScrolled;
      scrolledTo = $(window).scrollTop() - $(this.el).offset().top + 200;
      scrolledTo += $(this.el).find('h1').outerHeight();
      wordsScrolled = scrolledTo * this.wordsPerPixel;
      this.wordsRemaining = this.wordCount - wordsScrolled;
      timeRem = this.getApproximateTime(this.wordsRemaining / this.wpm);
      if (timeRem < 0) {
        timeRem = 0;
      }
      $(this.marker.el).css('top', scrolledTo + 'px');
      return this.marker.update(timeRem);
    }

  };

  Marker = class Marker {
    constructor(container) {
      this.container = container;
      this.el = this.createMarker();
    }

    createMarker() {
      var marker;
      marker = document.createElement('div');
      marker.className += 'read-marker';
      marker.innerHTML = '<i class="fa fa-arrow-down"></i> <span></span>';
      $(this.container).append(marker);
      return marker;
    }

    update(time) {
      var mins, that;
      that = this;
      mins = time === 1 ? 'min' : 'mins';
      $(this.el).find('span').text(time + ' ' + mins);
      $(this.el).stop().addClass('fadeIn');
      return setTimeout(function() {
        return $(that.el).removeClass('fadeIn');
      }, 500);
    }

  };

  $(function() {
    return new ReadTimer('#wrapper', 'article', {
      wpm: 180
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=coffeescript